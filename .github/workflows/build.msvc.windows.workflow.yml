name: Build/Deploy MSVC Windows

on:
  push:
    branches: [ master, features/github-actions ]
  pull_request:
    branches: [ master, features/github-actions ]
  release:
    types: [published]

jobs:
  build:
    name: Build all targets
    runs-on: windows-2019
    
    strategy:
      fail-fast: false

    env:
      VCPKG_PLATFORM_TOOLSET: v141
      VC_VARS_VERSION: 14.1

    steps:
    
    ## Checkout Git repo
    - name: Checkout Git Repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    
    ## Install all major library deps
    
    # Setup caches
    - name: Cache Qt (32-bit)
      id: cache-qt-32
      uses: actions/cache@v1
      with:
        path: ../QtDyn32
        key: ${{ runner.os }}-QtCache32
    
    - name: Cache Qt (64-bit)
      id: cache-qt-64
      uses: actions/cache@v1
      with:
        path: ../QtDyn64
        key: ${{ runner.os }}-QtCache64
    
    # Install Qt (from pre-defined action)
    - name: Install Qt (v5.15.0, 32-bit)
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win32_msvc2019'
        dir: ${{ runner.workspace }}/QtDyn32
        cached: ${{ steps.cache-qt-32.outputs.cache-hit }}
    
    - name: Set Qt location (v5.15.0, 32-bit)
      run: |
        echo '::set-env name=QT5_BIN_DIR_DYNAMIC_32::${{ env.Qt5_DIR }}/bin'
        echo '::set-env name=QT_PLUGIN_PATH_DYNAMIC_32::${{ env.QT_PLUGIN_PATH }}'
        echo '::set-env name=QML2_IMPORT_PATH_DYNAMIC_32::${{ env.QML2_IMPORT_PATH }}'
    
    - name: Install Qt (v5.15.0, 64-bit)
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        dir: ${{ runner.workspace }}/QtDyn64
        cached: ${{ steps.cache-qt-64.outputs.cache-hit }}
    
    - name: Set Qt location (v5.15.0, 64-bit)
      run: |
        echo '::set-env name=QT5_BIN_DIR_DYNAMIC_64::${{ env.Qt5_DIR }}/bin'
        echo '::set-env name=QT_PLUGIN_PATH_DYNAMIC_64::${{ env.QT_PLUGIN_PATH }}'
        echo '::set-env name=QML2_IMPORT_PATH_DYNAMIC_64::${{ env.QML2_IMPORT_PATH }}'
    
    - name: Set vcpkg's response file path used as part of cache's key.
      uses: lukka/set-shell-env@master
      with:
        VCPKGRESPONSEFILE: ${{ github.workspace }}/.github/workflows/msvc.windows.vcpkg.txt
        filter: ^VCPKG.*
    
    # Restore from cache the previously built ports. If cache-miss, download, build vcpkg.
    # Then install libarchive + libpng-apng for all targets.
    - name: Restore from cache and install vcpkg + libraries (libarchive, libpng-apng)
      # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.VCPKGRESPONSEFILE }}'
        # This commit ID corresponds to 2020.06
        vcpkgGitCommitId: 6185aa76504a5025f36754324abf307cc776f3da
        appendedCacheKey: ${{ hashFiles(env.VCPKGRESPONSEFILE) }}

    # Install Python + modules to run our helper script
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install Python libraries for bootstrap helper script
      run: |
        python -m pip install --upgrade pip
        pip install requests jinja2 irc
    
    # Install our static dependencies via helper script
    # TODO: get caching working here too
    - name: Install static dependencies via bootstrap helper script
      run: python -u gui\qt\deploy-scripts\appveyor_helper.py install

    # TODO: automate this somehow?
    - name: Set paths to newly installed static Qt libraries
      run: |
        echo '::set-env name=QT5_BIN_DIR_STATIC_32::C:\Qt\Qt5.15.0-static\bin'
        echo '::set-env name=QT5_BIN_DIR_STATIC_64::C:\Qt\Qt5.15.0x64-static\bin'

    ## Build time!
    
    # Are we releasing?
    - name: Set CEmu version for release (if applicable)
      run: |
        echo '::set-env name=CEMU_VERSION::${{ github.event.release.tag_name }}'
        echo Using tagged version :${{ env.CEMU_VERSION }}
      if: "github.event.release.tag_name"
    
    - name: Set CEmu version for development (if applicable)
      run: |
        echo '::set-env name=CEMU_VERSION::'
        echo No version defined, using empty version '${{ env.CEMU_VERSION }}'
      if: "!github.event.release.tag_name"
    
    # Setup VS
    - name: "Setup MSVC++ paths (32-bit target)"
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86
        toolset: ${{ env.VC_VARS_VERSION }}
    
    # Install vcpkg integration
    - name: Install vcpkg integration (32-bit)
      run: ${{ env.VCPKG_ROOT }}/vcpkg integrate install
    
    # 32-bit dynamic + static builds
    - name: "Build target: Dynamic/Shared (Debug, 32-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_32
        cd build_32
        ${{ env.QT5_BIN_DIR_DYNAMIC_32 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Debug
        cd ..
    
    - name: "Build target: Dynamic/Shared (Release, 32-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_32
        cd build_32
        ${{ env.QT5_BIN_DIR_DYNAMIC_32 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Release
        cd ..

    - name: "Build target: Static (Debug, 32-bit)"
      shell: cmd
      if: always()
      run: |
        md -p build_static_32
        cd build_static_32
        ${{ env.QT5_BIN_DIR_STATIC_32 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Debug /p:VcpkgTriplet=x86-windows-static
        cd ..
    
    - name: "Build target: Static (Release, 32-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_static_32
        cd build_static_32
        ${{ env.QT5_BIN_DIR_STATIC_32 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Release /p:VcpkgTriplet=x86-windows-static
        cd ..

    # 64-bit dynamic + static builds
    - name: "Setup MSVC++ paths (64-bit target)"
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        toolset: ${{ env.VC_VARS_VERSION }}

    # Install vcpkg integration
    - name: Install vcpkg integration (64-bit)
      run: ${{ env.VCPKG_ROOT }}/vcpkg integrate install

    - name: "Build target: Dynamic/Shared (Debug, 64-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_64
        cd build_64
        ${{ env.QT5_BIN_DIR_DYNAMIC_64 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Debug /p:Platform="x64"
    
    - name: "Build target: Dynamic/Shared (Release, 64-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_64
        cd build_64
        ${{ env.QT5_BIN_DIR_DYNAMIC_64 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Release /p:Platform="x64"
    
    - name: "Build target: Static (Debug, 64-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_static_64
        cd build_static_64
        ${{ env.QT5_BIN_DIR_STATIC_64 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Debug /p:Platform="x64" /p:VcpkgTriplet=x64-windows-static
    
    - name: "Build target: Static (Release, 64-bit)"
      shell: cmd
      if: always()
      run: |
        mkdir -p build_static_64
        cd build_static_64
        ${{ env.QT5_BIN_DIR_STATIC_64 }}\qmake -spec win32-msvc -tp vc CEMU_VERSION=${{ env.CEMU_VERSION }} LIBPNG_APNG_FROM_VCPKG=1 "..\gui\qt\CEmu.pro"
        msbuild CEmu.vcxproj /p:Configuration=Release /p:Platform="x64" /p:VcpkgTriplet=x64-windows-static

    - name: "Upload artifacts: Dynamic/Shared (Debug + Release, 32-bit)"
      uses: actions/upload-artifact@v2
      with:
        name: build-dyn-32
        path: build_32

    - name: "Upload artifacts: Dynamic/Shared (Debug + Release, 64-bit)"
      uses: actions/upload-artifact@v2
      with:
        name: build-dyn-64
        path: build_64

    - name: "Upload artifacts: Static (Debug + Release, 32-bit)"
      uses: actions/upload-artifact@v2
      with:
        name: build-static-32
        path: build_static_32

    - name: "Upload artifacts: Static (Debug + Release, 64-bit)"
      uses: actions/upload-artifact@v2
      with:
        name: build-static-64
        path: build_static_64

  deploy:
    # TODO: maybe find a way to reduce steps req'd to get running here
    name: Deploy all built targets
    runs-on: windows-2019
    
    strategy:
      fail-fast: false
      
    needs: build

    steps:
    
    ## Checkout Git repo
    - name: Checkout Git Repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    
    ## Install all major library deps
    
    # Setup caches
    - name: Cache Qt (32-bit)
      id: cache-qt-32
      uses: actions/cache@v1
      with:
        path: ../QtDyn32
        key: ${{ runner.os }}-QtCache32
    
    - name: Cache Qt (64-bit)
      id: cache-qt-64
      uses: actions/cache@v1
      with:
        path: ../QtDyn64
        key: ${{ runner.os }}-QtCache64
    
    # Install Qt (from pre-defined action)
    - name: Install Qt (v5.15.0, 32-bit)
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win32_msvc2019'
        dir: ${{ runner.workspace }}/QtDyn32
        cached: ${{ steps.cache-qt-32.outputs.cache-hit }}
    
    - name: Set Qt location (v5.15.0, 32-bit)
      run: |
        echo '::set-env name=QT5_BIN_DIR_DYNAMIC_32::${{ env.Qt5_DIR }}/bin'
        echo '::set-env name=QT_PLUGIN_PATH_DYNAMIC_32::${{ env.QT_PLUGIN_PATH }}'
        echo '::set-env name=QML2_IMPORT_PATH_DYNAMIC_32::${{ env.QML2_IMPORT_PATH }}'
    
    - name: Install Qt (v5.15.0, 64-bit)
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        dir: ${{ runner.workspace }}/QtDyn64
        cached: ${{ steps.cache-qt-64.outputs.cache-hit }}
    
    - name: Set Qt location (v5.15.0, 64-bit)
      run: |
        echo '::set-env name=QT5_BIN_DIR_DYNAMIC_64::${{ env.Qt5_DIR }}/bin'
        echo '::set-env name=QT_PLUGIN_PATH_DYNAMIC_64::${{ env.QT_PLUGIN_PATH }}'
        echo '::set-env name=QML2_IMPORT_PATH_DYNAMIC_64::${{ env.QML2_IMPORT_PATH }}'

    # Install Python + modules to run our helper script
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install Python libraries for bootstrap helper script
      run: |
        python -m pip install --upgrade pip
        pip install requests jinja2 irc
    
    # Install our static dependencies via helper script
    # TODO: get caching working here too
    - name: Install static dependencies via bootstrap helper script
      run: python -u gui\qt\deploy-scripts\appveyor_helper.py install

    # TODO: automate this somehow?
    - name: Set paths to newly installed static Qt libraries
      run: |
        echo '::set-env name=QT5_BIN_DIR_STATIC_32::C:\Qt\Qt5.15.0-static\bin'
        echo '::set-env name=QT5_BIN_DIR_STATIC_64::C:\Qt\Qt5.15.0x64-static\bin'
    
    - name: "Download artifacts: Dynamic/Shared (Debug + Release, 32-bit)"
      uses: actions/download-artifact@v2
      with:
        name: build-dyn-32
        path: build_32

    - name: "Download artifacts: Dynamic/Shared (Debug + Release, 64-bit)"
      uses: actions/download-artifact@v2
      with:
        name: build-dyn-64
        path: build_64

    - name: "Download artifacts: Static (Debug + Release, 32-bit)"
      uses: actions/download-artifact@v2
      with:
        name: build-static-32
        path: build_static_32

    - name: "Download artifacts: Static (Debug + Release, 64-bit)"
      uses: actions/download-artifact@v2
      with:
        name: build-static-64
        path: build_static_64
    
    # This requires the corresponding secrets to be set!
    - name: "Upload/deploy artifacts to Artifactory"
      run: python -u gui\qt\deploy-scripts\appveyor_helper.py deploy
      env:
        BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
